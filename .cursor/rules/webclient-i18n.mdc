---
description:
globs: webclient/**
alwaysApply: false
---
# Internationalization (i18n) Workflow

This document outlines the practices for implementing and managing internationalization (i18n) and localization (l10n) within the codebase.

## 1. Locale Configuration

-   **Central Configuration**: Supported locales are defined in `src/shared/config.ts` within the `supportedLocales` object.
    -   Each locale entry includes:
        -   `code`: The locale code (e.g., "en", "tr", "de-DE"). This code is used for naming message files and for internal i18n logic.
        -   `matches`: An array of regex patterns used for matching browser/accept-language headers.
        -   `name`: The human-readable name of the language (often in its native form, e.g., "English", "Türkçe", "Deutsch").
        -   `flag`: An emoji representing the country/language flag.
        -   `dir`: Text direction, either "ltr" (left-to-right) or "rtl" (right-to-left).
-   **Fallback Locale**: A `fallbackLocaleCode` is also defined in `src/shared/config.ts`, specifying the default language if a user's preferred locale is not supported or cannot be determined.
-   **Adding New Locales**:
    1.  Add a new entry to the `supportedLocales` object in `src/shared/config.ts` with all required fields.
    2.  Create a corresponding message file in `src/messages/` (see below).

## 2. Message Files

-   **Location**: Translation strings are stored in JSON files located in the `src/messages/` directory.
-   **Naming Convention**: Each file is named after the locale code it represents (e.g., `en.json`, `tr.json`, `de.json`).
-   **Structure**:
    -   Files are simple key-value JSON objects.
    -   Keys can be nested to group related translations (e.g., "Layout.Homepage", "Home.IntroText").
    -   Values are the translated strings for that locale.
    -   The structure of keys should be consistent across all message files. `en.json` can generally be considered the reference for all keys.
-   **Formatting**:
    -   Use standard JSON formatting.
    -   For multi-line strings (like `IntroText`), use `\n` for newline characters within the JSON string value.
    -   Preserve markdown formatting within strings if it's intended for rendering.

## 3. Locale Detection & Management

-   Locale detection (based on browser preferences, cookies, or URL paths) and overall state management are handled by dedicated i18n modules and middleware (e.g., `src/shared/modules/i18n/`, `src/middleware.ts`).
-   The active locale and translation messages are made available to components via context.

## 4. Using Translations in Components

### React Server Components (RSC)

-   To access translations in React Server Components, use the `getTranslations` async function.
    ```typescript
    // Example in an RSC (e.g., a Page component)
    import { getTranslations } from "@/shared/modules/i18n/get-translations.tsx";

    async function MyServerComponent() {
      const { t, locale } = await getTranslations();

      return (
        <div>
          <h1>{t("Home", "AYA the Open Source Network")}</h1>
          <p>Current locale: {locale.name}</p>
        </div>
      );
    }
    ```
-   The `t` function takes the group key and the specific string key as arguments.

### Client Components (`"use client"`)

-   Client components access translations via the `useTranslations` hook, which relies on `TranslationsProvider` set up in a parent server component (typically in `layout.tsx`).
    ```typescript
    "use client";

    import { useTranslations } from "@/shared/modules/i18n/use-translations.tsx";

    function MyClientComponent() {
      const { t, locale } = useTranslations();

      return (
        <button>{t("Layout", "Change theme")}</button>
      );
    }
    ```

## 5. Guidance for AI Agents

When adding new UI elements, text, or features that require user-facing strings:

1.  **Identify All New Strings**: Determine all new text that needs to be displayed to the user.
2.  **Add Keys to `en.json`**:
    -   Add new keys for these strings to the `src/messages/en.json` file first. Follow the existing structure (e.g., group related keys under a common parent like "UserProfile.EditButtonLabel").
    -   Provide the English version as the value.
3.  **Populate Other Message Files**:
    -   Copy the new keys (and their English string values as placeholders) from `en.json` to all other message files (`tr.json`, `de.json`, `ar.json`, etc.).
    -   **If specifically asked to translate**, provide the translations for the specified language(s). Otherwise, leave English strings as placeholders.
    -   Ensure `\n` is used for newlines in multi-line strings within the JSON.
4.  **Implement in Components**:
    -   If in a **React Server Component**, use `const { t } = await getTranslations();` and then `t("GroupKey", "StringKey")`.
    -   If in a **Client Component** (marked with `"use client"`), ensure `TranslationsProvider` is an ancestor. Then use `const { t } = useTranslations();` and `t("GroupKey", "StringKey")`.
5.  **Variables/Placeholders**: If a translated string needs to include dynamic values (e.g., a username), this is typically handled by the `t` function if it supports interpolation, or by constructing the string in the component. (Current `t` function capabilities should be confirmed if this arises).
6.  **Contextual Keys**: Ensure keys are descriptive and, if possible, provide context (e.g., use "Errors.PasswordTooShort" instead of just "PasswordTooShort" if there's a general "Errors" group).

By following these steps, we ensure that all new text is correctly internationalized and ready for translation across all supported languages.
