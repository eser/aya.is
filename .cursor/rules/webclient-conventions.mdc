---
description:
globs: webclient/**
alwaysApply: false
---
# Frontend

As a Senior Front-End Developer with expertise in React Server Components, Next.js App Router, TypeScript, and modern UI/UX frameworks (e.g., Tailwind, Shadcn, Radix UI Primitives), your goal is to provide thoughtful, accurate, and well-reasoned contributions. Focus on best practices and maintainability.

- Follow the user's requirements carefully & to the letter.
- First think step-by-step - describe your plan for what to build in pseudocode, written out in great detail.
- Confirm, then write code!
- Write code that is correct, adheres to best practices (including DRY), is bug-free, and fully functional. Ensure alignment with all guidelines outlined in this document.
- Focus on easy and readability code, over being performant.
- Fully implement all requested functionality.
- Leave NO todo's, placeholders or missing pieces.
- Ensure code is complete! Verify thoroughly finalised.
- Include all required imports, and ensure proper naming of key components.
- Be concise Minimize any other prose.
- If you think there might not be a correct answer, you say so.
- If you do not know the answer, say so, instead of guessing.

### Code Style and Structure
- Use early returns whenever possible to make the code more readable.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.

### React
- Use declarative JSX.
- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Optimize Web Vitals (LCP, CLS, FID).
- **Props Handling:** Components should accept a single `props` object rather than destructuring props directly in the function signature. Access props via `props.propertyName`.

### Typing
- Use TypeScript for all code; prefer types over interfaces.
- Avoid enums; use maps instead.
- **Component Prop Types:** Define explicit `type` aliases for component props, named as `ComponentNameProps` (e.g., `type MyComponentProps = { id: string; };`). Avoid inline prop types.

### Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Use descriptive variable and function/const names with auxiliary verbs (e.g., isLoading, hasError). Also, event functions should be named with a "handle" prefix, like "handleClick" for onClick and "handleKeyDown" for onKeyDown.

### Styling
- Implement responsive design with Tailwind, avoid using CSS or tags; use a mobile-first approach.
- Use ":" instead of the tertiary operator in class tags whenever possible.
- Implement accessibility features on elements (utilize components from Radix UI Primitives as much as possible). For example, a tag should have a tabindex="0", aria-label, on:click, and on:keydown, and similar attributes.

#### Core Component Styling with CSS Modules and Tailwind `@apply` (Preferred Method)
- **This is the strongly preferred method for all component styling.**
- For styling the primary elements of a component, its distinct visual parts, layout structure, and even utility-like adjustments, the pattern is:
    1. Define a semantic class name in a co-located `*.module.css` file (e.g., `product-card.module.css`). This class name should be descriptive of the element's role or the component itself (e.g., `.product-card`, `.card-title`, `.product-grid-layout`).
    2. Within this CSS Module, use Tailwind's `@apply` directive to compose the styles for that semantic class.
       ```css
       /* Example: product-card.module.css */
       .product-card { /* Semantic class for the component's root */
         @apply border rounded-lg p-4 shadow-md flex flex-col gap-2; /* Includes layout and spacing */
         & .title { /* Semantic class for an element within ProductCard */
           @apply text-xl font-bold mb-2;
         }
         & .description {
           @apply text-sm text-gray-600;
         }
       }
       ```
    3. Import the `styles` object from the module in your component.
    4. Apply the scoped class to your JSX element:
       ```tsx
       // Example: ProductCard.tsx
       import styles from './product-card.module.css';

       type ProductCardProps = {
         product: {
           name: string;
           description: string;
         };
       };

       function ProductCard(props: ProductCardProps) {
         return (
           <div className={styles['product-card']}>
             <h3 className={styles.title}>{props.product.name}</h3>
             <p className={styles.description}>{props.product.description}</p>
             {/* ... other elements ... */}
           </div>
         );
       }
       ```
- This approach promotes encapsulation, readability, reusability, and maintainability of all styles associated with a component. Strive to include all styling, including layout and spacing, within these CSS Modules.

#### Limited Use of Direct Tailwind Classes for Minor, Non-Component Adjustments
- While CSS Modules with `@apply` are the standard, direct Tailwind utility classes in the `className` prop should be **used sparingly and are generally discouraged for component styling.**
- Their use might be considered only for:
    - **Very simple, non-reusable, and highly contextual micro-adjustments** on generic HTML elements that are not part of a defined component's structure (e.g., a one-time margin on a `<div>` acting purely as a temporary spacer during development, which should ideally be refactored into a component or CSS Module).
    - **Global, application-level layout containers** (e.g., in `layout.tsx` or a top-level page component) that are not part of a reusable component system, where creating a dedicated CSS Module for a few basic flex/grid utilities might be deemed excessive. **However, even in these cases, evaluate if a semantic class in a CSS Module would improve long-term clarity and maintainability.**
- **General Rule:** If a style or layout is part of a component's identity, is likely to be reused, contributes to the semantic structure, or defines how a component arranges its children, it **must be defined within a CSS Module.**
- **Avoid using direct Tailwind classes for styling any core elements of your components or for any styles that could be encapsulated within a semantic class in a CSS Module.**
- Example of a *rare, potentially acceptable* (but to be minimized) direct application for a top-level, non-reusable page section wrapper:
  ```tsx
  // In a top-level page component, for a main section wrapper, not a reusable component
  <main className="w-full max-w-4xl mx-auto px-4 py-8">
    {/* ... page content composed of components that strictly use CSS Modules for their styling ... */}
  </main>
  ```
- **Always prioritize CSS Modules with `@apply` for clarity, maintainability, and consistency across the codebase.**

#### Combining CSS Module Classes and Direct Tailwind Utilities
- When (in rare, justified cases as outlined above) direct Tailwind utility classes are combined with a CSS Module class, use the `cn` utility function (available at `@/shared/lib/cn.ts`).
  ```tsx
  // Assumes styles.button is defined in a CSS Module
  // and cn is imported, e.g., import { cn } from "@/shared/lib/cn";
  // This pattern should be infrequent, favour adding variants or new semantic classes to your CSS module.
  <button className={cn(styles.button, "mt-2")}> {/* Minimized direct utility use */}
    Action
  </button>
  ```
  - The `cn` utility is preferred for constructing `className` strings, as it handles conditional classes and resolves potential Tailwind class conflicts.

#### Note on `@reference`
- You may encounter `@reference "path/to/globals.css";` in some `*.module.css` files. This is likely a project-specific PostCSS configuration. While its exact behavior should be understood from the build setup, it generally implies a relationship or dependency on global styles.

# Project-Specific Conventions and Advanced Features

This section complements the general frontend guidelines with specific practices observed and encouraged in this codebase.

## Tooling and Environment

- **Dual Linter/Formatter Setup:** The project uses Biome and Deno for linting and formatting.
    - **Biome Configuration:**
        - Line width: 120 characters.
        - Indentation: 2 spaces.
        - Quote style: Double quotes (`"`).
        - Import organization: Enabled and handled by Biome.
    - **Deno Configuration:**
        - Linting: Uses Deno's `recommended` rules.
        - Formatting: Line width 120 characters.
- **TypeScript Strict Mode:** Ensure all TypeScript code adheres to strict mode. This is enabled via `compilerOptions.strict: true` in `deno.json` and `tsconfig.json`.
- **Path Aliases:** Use the `@/` alias for imports from the `src` directory (e.g., `import { MyComponent } from "@/components/my-component.tsx";`). This is configured in `deno.json` and `tsconfig.json`.
- **Pre-commit Hooks:** Hooks are in place (see `.pre-commit-config.yaml`); ensure commits pass these checks.
- **Cutting-Edge Versions:** The project is comfortable using canary releases of Next.js, unstable Deno features and early adaptations of JavaScript/ECMAScript standards. Be mindful of potential breaking changes and test thoroughly.

## Next.js Specifics

- **React v19:**
    - Write components with the expectation that they will be processed by the React compiler. This generally means favoring idiomatic React and avoiding patterns that might confuse the compiler. Refer to React documentation for compiler-friendly patterns.
    - Minimize manual memoization (e.g. `useMemo`, `useCallback`) unless profiling explicitly shows a benefit, as the compiler aims to handle this automatically.
    - PPR is enabled (`experimental.ppr: true` in `next.config.ts`). Understand its implications for how pages are rendered and cached.
- **Server Components & "server-only":**
    - Embrace React Server Components (RSC) as the default.
    - Use the "server-only" package at the top of files/modules that should strictly run on the server and must not be imported into client components.
- **Async Server Components:** Use `async function` for Server Components that need to perform asynchronous operations (e.g., data fetching).
- **Metadata API:** Utilize the Next.js Metadata API (`export const metadata = ...` and `export const viewport = ...`) for managing `<head>` elements in layouts and pages.
- **Middleware:**
    - Next.js middleware is used for handling concerns like custom domains and internationalization.
    - Middleware configuration (runtime, matcher) is defined in the `src/middleware.ts` file.
- **Configuration (in `next.config.ts`):**
    - `reactStrictMode` is enabled.
    - `trailingSlash` is set to `false`.

## Coding Style and Patterns

- **Zod for Schema Validation:** Employ Zod for robust data validation, especially for API responses, form inputs, and environment variables.
- **MDX for Content:** Where applicable, use MDX for rich content embedding within React components (dependencies like `next-mdx-remote` are included).
- **Component Export Style:** Prefer named exports for React components (e.g., `export function MyComponent() {}` or `export const MyComponent = () => {}`). Use default exports only when specifically mandated by Next.js conventions (e.g., for page components in `app/.../page.tsx` and layout components in `app/.../layout.tsx`). Avoid the `export { MyComponent as default };` pattern for components unless it aligns with a Next.js requirement for a specific file type.
- **Internationalization (i18n):**
    - Locale detection and management are handled via middleware and dedicated i18n modules (e.g., in `src/shared/modules/i18n/`).
    - Translations are provided through context (`TranslationsProvider`).
    - Localized messages placed under `src/messages/[culture-code].json`.

## Linting and Formatting Commands (from `package.json`)

- To lint: `npm run lint` (runs Biome and Deno linters: `biome lint --unsafe && deno lint`)
- To fix lint issues: `npm run lint:fix` (`biome lint --unsafe --write && deno lint --fix`)
- To check formatting: `npm run format` (checks with Biome and Deno: `biome format && deno fmt --check`)
- To fix formatting: `npm run format:fix` (`deno fmt`).
    - *Consider consolidating `format:fix` to include Biome, e.g., `biome format --write . && deno fmt` for comprehensive formatting.*

## Reminder on Existing Rules

Continue to adhere to the excellent general guidelines already established in the preceding sections of this document regarding overall approach, code style, React, TypeScript, naming, and styling.
