// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package storage

import (
	"context"
)

type Querier interface {
	//CheckProfileSlugExists
	//
	//  SELECT EXISTS(
	//    SELECT 1 FROM "profile"
	//    WHERE slug = $1
	//      AND deleted_at IS NULL
	//  ) AS exists
	CheckProfileSlugExists(ctx context.Context, arg CheckProfileSlugExistsParams) (bool, error)
	//CreateProfile
	//
	//  INSERT INTO "profile" (id, slug, kind, custom_domain, profile_picture_uri, pronouns, properties)
	//  VALUES ($1, $2, $3, $4, $5, $6, $7)
	CreateProfile(ctx context.Context, arg CreateProfileParams) error
	//CreateProfileLink
	//
	//  INSERT INTO "profile_link" (
	//    id,
	//    kind,
	//    profile_id,
	//    "order",
	//    is_managed,
	//    is_verified,
	//    is_hidden,
	//    remote_id,
	//    public_id,
	//    uri,
	//    title,
	//    auth_provider,
	//    auth_access_token_scope,
	//    auth_access_token,
	//    auth_access_token_expires_at,
	//    auth_refresh_token,
	//    auth_refresh_token_expires_at,
	//    created_at
	//  ) VALUES (
	//    $1,
	//    $2,
	//    $3,
	//    $4,
	//    $5,
	//    $6,
	//    $7,
	//    $8,
	//    $9,
	//    $10,
	//    $11,
	//    $12,
	//    $13,
	//    $14,
	//    $15,
	//    $16,
	//    $17,
	//    NOW()
	//  ) RETURNING id, profile_id, kind, "order", is_managed, is_verified, is_hidden, remote_id, public_id, uri, title, auth_provider, auth_access_token_scope, auth_access_token, auth_access_token_expires_at, auth_refresh_token, auth_refresh_token_expires_at, properties, created_at, updated_at, deleted_at
	CreateProfileLink(ctx context.Context, arg CreateProfileLinkParams) (*ProfileLink, error)
	//CreateProfilePage
	//
	//  INSERT INTO "profile_page" (
	//    id,
	//    slug,
	//    profile_id,
	//    "order",
	//    cover_picture_uri,
	//    published_at,
	//    created_at
	//  ) VALUES (
	//    $1,
	//    $2,
	//    $3,
	//    $4,
	//    $5,
	//    $6,
	//    NOW()
	//  ) RETURNING id, profile_id, slug, "order", cover_picture_uri, published_at, created_at, updated_at, deleted_at
	CreateProfilePage(ctx context.Context, arg CreateProfilePageParams) (*ProfilePage, error)
	//CreateProfilePageTx
	//
	//  INSERT INTO "profile_page_tx" (
	//    profile_page_id,
	//    locale_code,
	//    title,
	//    summary,
	//    content
	//  ) VALUES (
	//    $1,
	//    $2,
	//    $3,
	//    $4,
	//    $5
	//  )
	CreateProfilePageTx(ctx context.Context, arg CreateProfilePageTxParams) error
	//CreateProfileTx
	//
	//  INSERT INTO "profile_tx" (profile_id, locale_code, title, description, properties)
	//  VALUES ($1, $2, $3, $4, $5)
	CreateProfileTx(ctx context.Context, arg CreateProfileTxParams) error
	//CreateSession
	//
	//  INSERT INTO
	//    session (
	//      id,
	//      status,
	//      oauth_request_state,
	//      oauth_request_code_verifier,
	//      oauth_redirect_uri,
	//      logged_in_user_id,
	//      logged_in_at,
	//      expires_at,
	//      created_at,
	//      updated_at
	//    )
	//  VALUES
	//    (
	//      $1,
	//      $2,
	//      $3,
	//      $4,
	//      $5,
	//      $6,
	//      $7,
	//      $8,
	//      $9,
	//      $10
	//    )
	CreateSession(ctx context.Context, arg CreateSessionParams) error
	//CreateUser
	//
	//  INSERT INTO "user" (
	//      id,
	//      kind,
	//      NAME,
	//      email,
	//      phone,
	//      github_handle,
	//      github_remote_id,
	//      bsky_handle,
	//      bsky_remote_id,
	//      x_handle,
	//      x_remote_id,
	//      individual_profile_id,
	//      created_at,
	//      updated_at,
	//      deleted_at
	//    )
	//  VALUES (
	//      $1,
	//      $2,
	//      $3,
	//      $4,
	//      $5,
	//      $6,
	//      $7,
	//      $8,
	//      $9,
	//      $10,
	//      $11,
	//      $12,
	//      $13,
	//      $14,
	//      $15
	//    )
	CreateUser(ctx context.Context, arg CreateUserParams) error
	//DeleteProfileLink
	//
	//  UPDATE "profile_link"
	//  SET deleted_at = NOW()
	//  WHERE id = $1
	//    AND deleted_at IS NULL
	DeleteProfileLink(ctx context.Context, arg DeleteProfileLinkParams) (int64, error)
	//DeleteProfilePage
	//
	//  UPDATE "profile_page"
	//  SET deleted_at = NOW()
	//  WHERE id = $1
	//    AND deleted_at IS NULL
	DeleteProfilePage(ctx context.Context, arg DeleteProfilePageParams) (int64, error)
	//GetFromCache
	//
	//  SELECT value, updated_at
	//  FROM "cache"
	//  WHERE key = $1
	//  LIMIT 1
	GetFromCache(ctx context.Context, arg GetFromCacheParams) (*GetFromCacheRow, error)
	//GetFromCacheSince
	//
	//  SELECT value, updated_at
	//  FROM "cache"
	//  WHERE key = $1
	//    AND updated_at > $2
	//  LIMIT 1
	GetFromCacheSince(ctx context.Context, arg GetFromCacheSinceParams) (*GetFromCacheSinceRow, error)
	//GetProfileByID
	//
	//  SELECT p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, p.approved_at, pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
	//  FROM "profile" p
	//    INNER JOIN "profile_tx" pt ON pt.profile_id = p.id
	//    AND pt.locale_code = $1
	//  WHERE p.id = $2
	//    AND p.deleted_at IS NULL
	//  LIMIT 1
	GetProfileByID(ctx context.Context, arg GetProfileByIDParams) (*GetProfileByIDRow, error)
	//GetProfileIDByCustomDomain
	//
	//  SELECT id
	//  FROM "profile"
	//  WHERE custom_domain = $1
	//    AND deleted_at IS NULL
	//  LIMIT 1
	GetProfileIDByCustomDomain(ctx context.Context, arg GetProfileIDByCustomDomainParams) (string, error)
	//GetProfileIDBySlug
	//
	//  SELECT id
	//  FROM "profile"
	//  WHERE slug = $1
	//    AND deleted_at IS NULL
	//  LIMIT 1
	GetProfileIDBySlug(ctx context.Context, arg GetProfileIDBySlugParams) (string, error)
	//GetProfileLink
	//
	//  SELECT id, profile_id, kind, "order", is_managed, is_verified, is_hidden, remote_id, public_id, uri, title, auth_provider, auth_access_token_scope, auth_access_token, auth_access_token_expires_at, auth_refresh_token, auth_refresh_token_expires_at, properties, created_at, updated_at, deleted_at
	//  FROM "profile_link"
	//  WHERE id = $1
	//    AND deleted_at IS NULL
	GetProfileLink(ctx context.Context, arg GetProfileLinkParams) (*ProfileLink, error)
	//GetProfileMembershipsByMemberProfileID
	//
	//  SELECT
	//    pm.id as membership_id,
	//    pm.kind as membership_kind,
	//    pm.started_at,
	//    pm.finished_at,
	//    pm.properties as membership_properties,
	//    pm.created_at as membership_created_at,
	//    p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, p.approved_at,
	//    pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
	//  FROM
	//    "profile_membership" pm
	//    INNER JOIN "profile" p ON p.id = pm.profile_id
	//      AND p.approved_at IS NOT NULL
	//      AND p.deleted_at IS NULL
	//    INNER JOIN "profile_tx" pt ON pt.profile_id = p.id
	//      AND pt.locale_code = $1
	//  WHERE
	//    pm.deleted_at IS NULL
	//    AND pm.member_profile_id = $2
	//    AND (pm.finished_at IS NULL OR pm.finished_at > NOW())
	//  ORDER BY pm.created_at DESC
	GetProfileMembershipsByMemberProfileID(ctx context.Context, arg GetProfileMembershipsByMemberProfileIDParams) ([]*GetProfileMembershipsByMemberProfileIDRow, error)
	//GetProfileOwnershipForUser
	//
	//  SELECT
	//    p.id,
	//    p.slug,
	//    p.kind as profile_kind,
	//    u.kind as user_kind,
	//    CASE
	//      WHEN u.kind = 'admin' THEN true
	//      WHEN p.kind = 'individual' AND u.individual_profile_id = p.id THEN true
	//      WHEN pm.kind IN ('owner', 'lead') THEN true
	//      ELSE false
	//    END as can_edit
	//  FROM "profile" p
	//  LEFT JOIN "profile_membership" pm ON p.id = pm.profile_id
	//    AND pm.deleted_at IS NULL
	//    AND (pm.finished_at IS NULL OR pm.finished_at > NOW())
	//  LEFT JOIN "profile" up ON pm.member_profile_id = up.id AND up.deleted_at IS NULL
	//  LEFT JOIN "user" u ON up.id = u.individual_profile_id
	//  WHERE u.id = $1
	//    AND p.slug = $2
	//    AND p.deleted_at IS NULL
	//  LIMIT 1
	GetProfileOwnershipForUser(ctx context.Context, arg GetProfileOwnershipForUserParams) (*GetProfileOwnershipForUserRow, error)
	//GetProfilePage
	//
	//  SELECT id, profile_id, slug, "order", cover_picture_uri, published_at, created_at, updated_at, deleted_at
	//  FROM "profile_page"
	//  WHERE id = $1
	//    AND deleted_at IS NULL
	GetProfilePage(ctx context.Context, arg GetProfilePageParams) (*ProfilePage, error)
	//GetProfilePageByProfileIDAndSlug
	//
	//  SELECT pp.id, pp.profile_id, pp.slug, pp."order", pp.cover_picture_uri, pp.published_at, pp.created_at, pp.updated_at, pp.deleted_at, ppt.profile_page_id, ppt.locale_code, ppt.title, ppt.summary, ppt.content
	//  FROM "profile_page" pp
	//    INNER JOIN "profile_page_tx" ppt ON ppt.profile_page_id = pp.id
	//    AND ppt.locale_code = $1
	//  WHERE pp.profile_id = $2 AND pp.slug = $3 AND pp.deleted_at IS NULL
	//  ORDER BY pp."order"
	GetProfilePageByProfileIDAndSlug(ctx context.Context, arg GetProfilePageByProfileIDAndSlugParams) (*GetProfilePageByProfileIDAndSlugRow, error)
	//GetProfileTxByID
	//
	//  SELECT pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
	//  FROM "profile_tx" pt
	//  WHERE pt.profile_id = $1
	GetProfileTxByID(ctx context.Context, arg GetProfileTxByIDParams) ([]*GetProfileTxByIDRow, error)
	//GetSessionByID
	//
	//  SELECT
	//    id,
	//    status,
	//    oauth_request_state,
	//    oauth_request_code_verifier,
	//    oauth_redirect_uri,
	//    logged_in_user_id,
	//    logged_in_at,
	//    expires_at,
	//    created_at,
	//    updated_at
	//  FROM
	//    session
	//  WHERE
	//    id = $1
	GetSessionByID(ctx context.Context, arg GetSessionByIDParams) (*Session, error)
	//GetStoryByID
	//
	//  SELECT
	//    s.id, s.author_profile_id, s.slug, s.kind, s.status, s.is_featured, s.story_picture_uri, s.properties, s.created_at, s.updated_at, s.deleted_at,
	//    st.story_id, st.locale_code, st.title, st.summary, st.content,
	//    p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, p.approved_at,
	//    pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties,
	//    pb.publications
	//  FROM "story" s
	//    INNER JOIN "story_tx" st ON st.story_id = s.id
	//    AND st.locale_code = $1
	//    LEFT JOIN "profile" p ON p.id = s.author_profile_id
	//    AND p.approved_at IS NOT NULL
	//    AND p.deleted_at IS NULL
	//    INNER JOIN "profile_tx" pt ON pt.profile_id = p.id
	//    AND pt.locale_code = $1
	//    LEFT JOIN LATERAL (
	//      SELECT JSONB_AGG(
	//        JSONB_BUILD_OBJECT('profile', row_to_json(p2), 'profile_tx', row_to_json(p2t))
	//      ) AS "publications"
	//      FROM story_publication sp
	//        INNER JOIN "profile" p2 ON p2.id = sp.profile_id
	//        AND p2.deleted_at IS NULL
	//        INNER JOIN "profile_tx" p2t ON p2t.profile_id = p2.id
	//        AND p2t.locale_code = $1
	//      WHERE sp.story_id = s.id
	//        AND ($2::CHAR(26) IS NULL OR sp.profile_id = $2::CHAR(26))
	//        AND sp.deleted_at IS NULL
	//    ) pb ON TRUE
	//  WHERE s.id = $3
	//    AND ($4::CHAR(26) IS NULL OR s.author_profile_id = $4::CHAR(26))
	//    AND s.deleted_at IS NULL
	//  LIMIT 1
	GetStoryByID(ctx context.Context, arg GetStoryByIDParams) (*GetStoryByIDRow, error)
	//GetStoryIDBySlug
	//
	//  SELECT id
	//  FROM "story"
	//  WHERE slug = $1
	//    AND deleted_at IS NULL
	//  LIMIT 1
	GetStoryIDBySlug(ctx context.Context, arg GetStoryIDBySlugParams) (string, error)
	//GetUserByEmail
	//
	//  SELECT id, kind, name, email, phone, github_handle, github_remote_id, bsky_handle, bsky_remote_id, x_handle, x_remote_id, individual_profile_id, created_at, updated_at, deleted_at
	//  FROM "user"
	//  WHERE email = $1
	//    AND deleted_at IS NULL
	//  LIMIT 1
	GetUserByEmail(ctx context.Context, arg GetUserByEmailParams) (*User, error)
	//GetUserByGitHubRemoteID
	//
	//  SELECT id, kind, name, email, phone, github_handle, github_remote_id, bsky_handle, bsky_remote_id, x_handle, x_remote_id, individual_profile_id, created_at, updated_at, deleted_at
	//  FROM "user"
	//  WHERE github_remote_id = $1
	//    AND deleted_at IS NULL
	//  LIMIT 1
	GetUserByGitHubRemoteID(ctx context.Context, arg GetUserByGitHubRemoteIDParams) (*User, error)
	//GetUserByID
	//
	//  SELECT id, kind, name, email, phone, github_handle, github_remote_id, bsky_handle, bsky_remote_id, x_handle, x_remote_id, individual_profile_id, created_at, updated_at, deleted_at
	//  FROM "user"
	//  WHERE id = $1
	//    AND deleted_at IS NULL
	//  LIMIT 1
	GetUserByID(ctx context.Context, arg GetUserByIDParams) (*User, error)
	//GetUserProfilePermissions
	//
	//  SELECT
	//    p.id,
	//    p.slug,
	//    p.kind as profile_kind,
	//    COALESCE(pm.kind, '') as membership_kind,
	//    u.kind as user_kind
	//  FROM "profile" p
	//  LEFT JOIN "profile_membership" pm ON p.id = pm.profile_id AND pm.deleted_at IS NULL
	//  LEFT JOIN "profile" up ON pm.member_profile_id = up.id AND up.deleted_at IS NULL
	//  LEFT JOIN "user" u ON up.id = u.individual_profile_id
	//  WHERE u.id = $1
	//    AND p.deleted_at IS NULL
	//    AND (pm.finished_at IS NULL OR pm.finished_at > NOW())
	GetUserProfilePermissions(ctx context.Context, arg GetUserProfilePermissionsParams) ([]*GetUserProfilePermissionsRow, error)
	//ListProfileLinksByProfileID
	//
	//  SELECT id, profile_id, kind, "order", is_managed, is_verified, is_hidden, remote_id, public_id, uri, title, auth_provider, auth_access_token_scope, auth_access_token, auth_access_token_expires_at, auth_refresh_token, auth_refresh_token_expires_at, properties, created_at, updated_at, deleted_at
	//  FROM "profile_link"
	//  WHERE profile_id = $1
	//    AND is_hidden = FALSE
	//    AND deleted_at IS NULL
	//  ORDER BY "order"
	ListProfileLinksByProfileID(ctx context.Context, arg ListProfileLinksByProfileIDParams) ([]*ProfileLink, error)
	//ListProfileLinksForKind
	//
	//  SELECT pl.id, pl.profile_id, pl.kind, pl."order", pl.is_managed, pl.is_verified, pl.is_hidden, pl.remote_id, pl.public_id, pl.uri, pl.title, pl.auth_provider, pl.auth_access_token_scope, pl.auth_access_token, pl.auth_access_token_expires_at, pl.auth_refresh_token, pl.auth_refresh_token_expires_at, pl.properties, pl.created_at, pl.updated_at, pl.deleted_at
	//  FROM "profile_link" pl
	//    INNER JOIN "profile" p ON p.id = pl.profile_id
	//    AND p.deleted_at IS NULL
	//  WHERE pl.kind = $1
	//    AND pl.deleted_at IS NULL
	//  ORDER BY pl."order"
	ListProfileLinksForKind(ctx context.Context, arg ListProfileLinksForKindParams) ([]*ProfileLink, error)
	//ListProfileMemberships
	//
	//  SELECT
	//    pm.id, pm.profile_id, pm.member_profile_id, pm.kind, pm.properties, pm.started_at, pm.finished_at, pm.created_at, pm.updated_at, pm.deleted_at,
	//    p1.id, p1.slug, p1.kind, p1.custom_domain, p1.profile_picture_uri, p1.pronouns, p1.properties, p1.created_at, p1.updated_at, p1.deleted_at, p1.approved_at,
	//    p1t.profile_id, p1t.locale_code, p1t.title, p1t.description, p1t.properties,
	//    p2.id, p2.slug, p2.kind, p2.custom_domain, p2.profile_picture_uri, p2.pronouns, p2.properties, p2.created_at, p2.updated_at, p2.deleted_at, p2.approved_at,
	//    p2t.profile_id, p2t.locale_code, p2t.title, p2t.description, p2t.properties
	//  FROM
	//  	"profile_membership" pm
	//    INNER JOIN "profile" p1 ON p1.id = pm.profile_id
	//      AND ($1::TEXT IS NULL OR p1.kind = ANY(string_to_array($1::TEXT, ',')))
	//      AND p1.approved_at IS NOT NULL
	//      AND p1.deleted_at IS NULL
	//    INNER JOIN "profile_tx" p1t ON p1t.profile_id = p1.id
	//  	  AND p1t.locale_code = $2
	//    INNER JOIN "profile" p2 ON p2.id = pm.member_profile_id
	//      AND ($3::TEXT IS NULL OR p2.kind = ANY(string_to_array($3::TEXT, ',')))
	//      AND p2.approved_at IS NOT NULL
	//      AND p2.deleted_at IS NULL
	//    INNER JOIN "profile_tx" p2t ON p2t.profile_id = p2.id
	//  	  AND p2t.locale_code = $2
	//  WHERE pm.deleted_at IS NULL
	//      AND ($4::TEXT IS NULL OR pm.profile_id = $4::TEXT)
	//      AND ($5::TEXT IS NULL OR pm.member_profile_id = $5::TEXT)
	ListProfileMemberships(ctx context.Context, arg ListProfileMembershipsParams) ([]*ListProfileMembershipsRow, error)
	//ListProfilePagesByProfileID
	//
	//  SELECT pp.id, pp.profile_id, pp.slug, pp."order", pp.cover_picture_uri, pp.published_at, pp.created_at, pp.updated_at, pp.deleted_at, ppt.profile_page_id, ppt.locale_code, ppt.title, ppt.summary, ppt.content
	//  FROM "profile_page" pp
	//    INNER JOIN "profile_page_tx" ppt ON ppt.profile_page_id = pp.id
	//    AND ppt.locale_code = $1
	//  WHERE pp.profile_id = $2
	//    AND pp.deleted_at IS NULL
	//  ORDER BY pp."order"
	ListProfilePagesByProfileID(ctx context.Context, arg ListProfilePagesByProfileIDParams) ([]*ListProfilePagesByProfileIDRow, error)
	//ListProfiles
	//
	//  SELECT p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, p.approved_at, pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
	//  FROM "profile" p
	//    INNER JOIN "profile_tx" pt ON pt.profile_id = p.id
	//    AND pt.locale_code = $1
	//  WHERE ($2::TEXT IS NULL OR p.kind = ANY(string_to_array($2::TEXT, ',')))
	//    AND p.approved_at IS NOT NULL
	//    AND p.deleted_at IS NULL
	ListProfiles(ctx context.Context, arg ListProfilesParams) ([]*ListProfilesRow, error)
	// -- name: ListStories :many
	// SELECT sqlc.embed(s), sqlc.embed(st), sqlc.embed(p), sqlc.embed(pt)
	// FROM "story" s
	//   INNER JOIN "story_tx" st ON st.story_id = s.id
	//   AND (sqlc.narg(filter_kind)::TEXT IS NULL OR s.kind = ANY(string_to_array(sqlc.narg(filter_kind)::TEXT, ',')))
	//   AND (sqlc.narg(filter_author_profile_id)::CHAR(26) IS NULL OR s.author_profile_id = sqlc.narg(filter_author_profile_id)::CHAR(26))
	//   AND st.locale_code = sqlc.arg(locale_code)
	//   LEFT JOIN "profile" p ON p.id = s.author_profile_id AND p.deleted_at IS NULL
	//   INNER JOIN "profile_tx" pt ON pt.profile_id = p.id AND pt.locale_code = sqlc.arg(locale_code)
	// WHERE s.deleted_at IS NULL
	// ORDER BY s.created_at DESC;
	//
	//
	//  SELECT
	//    s.id, s.author_profile_id, s.slug, s.kind, s.status, s.is_featured, s.story_picture_uri, s.properties, s.created_at, s.updated_at, s.deleted_at,
	//    st.story_id, st.locale_code, st.title, st.summary, st.content,
	//    p1.id, p1.slug, p1.kind, p1.custom_domain, p1.profile_picture_uri, p1.pronouns, p1.properties, p1.created_at, p1.updated_at, p1.deleted_at, p1.approved_at,
	//    p1t.profile_id, p1t.locale_code, p1t.title, p1t.description, p1t.properties,
	//    pb.publications
	//  FROM "story" s
	//    INNER JOIN "story_tx" st ON st.story_id = s.id
	//    AND st.locale_code = $1
	//    LEFT JOIN "profile" p1 ON p1.id = s.author_profile_id
	//    AND p1.approved_at IS NOT NULL
	//    AND p1.deleted_at IS NULL
	//    INNER JOIN "profile_tx" p1t ON p1t.profile_id = p1.id
	//    AND p1t.locale_code = $1
	//    LEFT JOIN LATERAL (
	//      SELECT JSONB_AGG(
	//        JSONB_BUILD_OBJECT('profile', row_to_json(p2), 'profile_tx', row_to_json(p2t))
	//      ) AS "publications"
	//      FROM story_publication sp
	//        INNER JOIN "profile" p2 ON p2.id = sp.profile_id
	//        AND p2.approved_at IS NOT NULL
	//        AND p2.deleted_at IS NULL
	//        INNER JOIN "profile_tx" p2t ON p2t.profile_id = p2.id
	//        AND p2t.locale_code = $1
	//      WHERE sp.story_id = s.id
	//        AND ($2::CHAR(26) IS NULL OR sp.profile_id = $2::CHAR(26))
	//        AND sp.deleted_at IS NULL
	//    ) pb ON TRUE
	//  WHERE
	//    pb.publications IS NOT NULL
	//    AND ($3::TEXT IS NULL OR s.kind = ANY(string_to_array($3::TEXT, ',')))
	//    AND ($4::CHAR(26) IS NULL OR s.author_profile_id = $4::CHAR(26))
	//    AND s.deleted_at IS NULL
	//  ORDER BY s.created_at DESC
	ListStoriesOfPublication(ctx context.Context, arg ListStoriesOfPublicationParams) ([]*ListStoriesOfPublicationRow, error)
	//ListUsers
	//
	//  SELECT id, kind, name, email, phone, github_handle, github_remote_id, bsky_handle, bsky_remote_id, x_handle, x_remote_id, individual_profile_id, created_at, updated_at, deleted_at
	//  FROM "user"
	//  WHERE ($1::TEXT IS NULL OR kind = ANY(string_to_array($1::TEXT, ',')))
	//    AND deleted_at IS NULL
	ListUsers(ctx context.Context, arg ListUsersParams) ([]*User, error)
	//RemoveAllFromCache
	//
	//  DELETE FROM "cache"
	RemoveAllFromCache(ctx context.Context) (int64, error)
	//RemoveExpiredFromCache
	//
	//  DELETE FROM "cache"
	//  WHERE updated_at < $1
	RemoveExpiredFromCache(ctx context.Context, arg RemoveExpiredFromCacheParams) (int64, error)
	//RemoveFromCache
	//
	//  DELETE FROM "cache"
	//  WHERE key = $1
	RemoveFromCache(ctx context.Context, arg RemoveFromCacheParams) (int64, error)
	//RemoveProfile
	//
	//  UPDATE "profile"
	//  SET deleted_at = NOW()
	//  WHERE id = $1
	//    AND deleted_at IS NULL
	RemoveProfile(ctx context.Context, arg RemoveProfileParams) (int64, error)
	//RemoveUser
	//
	//  UPDATE "user"
	//  SET deleted_at = NOW()
	//  WHERE id = $1
	//    AND deleted_at IS NULL
	RemoveUser(ctx context.Context, arg RemoveUserParams) (int64, error)
	//SetInCache
	//
	//  INSERT INTO "cache" (key, value, updated_at)
	//  VALUES ($1, $2, NOW())
	//  ON CONFLICT ("key") DO UPDATE SET value = $2, updated_at = NOW()
	SetInCache(ctx context.Context, arg SetInCacheParams) (int64, error)
	//SetUserIndividualProfileID
	//
	//  UPDATE "user"
	//  SET individual_profile_id = $1
	//  WHERE id = $2
	//    AND deleted_at IS NULL
	SetUserIndividualProfileID(ctx context.Context, arg SetUserIndividualProfileIDParams) (int64, error)
	//UpdateProfile
	//
	//  UPDATE "profile"
	//  SET
	//    profile_picture_uri = $1,
	//    pronouns = $2,
	//    properties = $3,
	//    updated_at = NOW()
	//  WHERE id = $4
	//    AND deleted_at IS NULL
	UpdateProfile(ctx context.Context, arg UpdateProfileParams) (int64, error)
	//UpdateProfileLink
	//
	//  UPDATE "profile_link"
	//  SET
	//    kind = $1,
	//    "order" = $2,
	//    uri = $3,
	//    title = $4,
	//    is_hidden = $5,
	//    updated_at = NOW()
	//  WHERE id = $6
	//    AND deleted_at IS NULL
	UpdateProfileLink(ctx context.Context, arg UpdateProfileLinkParams) (int64, error)
	//UpdateProfilePage
	//
	//  UPDATE "profile_page"
	//  SET
	//    slug = $1,
	//    "order" = $2,
	//    cover_picture_uri = $3,
	//    published_at = $4,
	//    updated_at = NOW()
	//  WHERE id = $5
	//    AND deleted_at IS NULL
	UpdateProfilePage(ctx context.Context, arg UpdateProfilePageParams) (int64, error)
	//UpdateProfilePageTx
	//
	//  UPDATE "profile_page_tx"
	//  SET
	//    title = $1,
	//    summary = $2,
	//    content = $3
	//  WHERE profile_page_id = $4
	//    AND locale_code = $5
	UpdateProfilePageTx(ctx context.Context, arg UpdateProfilePageTxParams) (int64, error)
	//UpdateProfileTx
	//
	//  UPDATE "profile_tx"
	//  SET
	//    title = $1,
	//    description = $2,
	//    properties = $3
	//  WHERE profile_id = $4
	//    AND locale_code = $5
	UpdateProfileTx(ctx context.Context, arg UpdateProfileTxParams) (int64, error)
	//UpdateSessionLoggedInAt
	//
	//  UPDATE
	//    session
	//  SET
	//    logged_in_at = $1,
	//    updated_at = NOW()
	//  WHERE
	//    id = $2
	UpdateSessionLoggedInAt(ctx context.Context, arg UpdateSessionLoggedInAtParams) error
	//UpdateUser
	//
	//  UPDATE "user"
	//  SET kind = $1,
	//    NAME = $2,
	//    email = $3,
	//    phone = $4,
	//    github_handle = $5,
	//    github_remote_id = $6,
	//    bsky_handle = $7,
	//    bsky_remote_id = $8,
	//    x_handle = $9,
	//    x_remote_id = $10,
	//    individual_profile_id = $11
	//  WHERE id = $12
	//    AND deleted_at IS NULL
	UpdateUser(ctx context.Context, arg UpdateUserParams) (int64, error)
	//UpsertProfilePageTx
	//
	//  INSERT INTO "profile_page_tx" (
	//    profile_page_id,
	//    locale_code,
	//    title,
	//    summary,
	//    content
	//  ) VALUES (
	//    $1,
	//    $2,
	//    $3,
	//    $4,
	//    $5
	//  ) ON CONFLICT (profile_page_id, locale_code) DO UPDATE SET
	//    title = EXCLUDED.title,
	//    summary = EXCLUDED.summary,
	//    content = EXCLUDED.content
	UpsertProfilePageTx(ctx context.Context, arg UpsertProfilePageTxParams) error
	//UpsertProfileTx
	//
	//  INSERT INTO "profile_tx" (profile_id, locale_code, title, description, properties)
	//  VALUES ($1, $2, $3, $4, $5)
	//  ON CONFLICT (profile_id, locale_code)
	//  DO UPDATE SET
	//    title = EXCLUDED.title,
	//    description = EXCLUDED.description,
	//    properties = EXCLUDED.properties
	UpsertProfileTx(ctx context.Context, arg UpsertProfileTxParams) error
}

var _ Querier = (*Queries)(nil)
