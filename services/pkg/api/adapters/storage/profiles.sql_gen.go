// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: profiles.sql

package storage

import (
	"context"
	"database/sql"
	"time"

	"github.com/sqlc-dev/pqtype"
)

const checkProfileSlugExists = `-- name: CheckProfileSlugExists :one
SELECT EXISTS(
  SELECT 1 FROM "profile"
  WHERE slug = $1
    AND deleted_at IS NULL
) AS exists
`

type CheckProfileSlugExistsParams struct {
	Slug string `db:"slug" json:"slug"`
}

// CheckProfileSlugExists
//
//	SELECT EXISTS(
//	  SELECT 1 FROM "profile"
//	  WHERE slug = $1
//	    AND deleted_at IS NULL
//	) AS exists
func (q *Queries) CheckProfileSlugExists(ctx context.Context, arg CheckProfileSlugExistsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkProfileSlugExists, arg.Slug)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createProfile = `-- name: CreateProfile :exec
INSERT INTO "profile" (id, slug, kind, custom_domain, profile_picture_uri, pronouns, properties)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateProfileParams struct {
	ID                string                `db:"id" json:"id"`
	Slug              string                `db:"slug" json:"slug"`
	Kind              string                `db:"kind" json:"kind"`
	CustomDomain      sql.NullString        `db:"custom_domain" json:"custom_domain"`
	ProfilePictureURI sql.NullString        `db:"profile_picture_uri" json:"profile_picture_uri"`
	Pronouns          sql.NullString        `db:"pronouns" json:"pronouns"`
	Properties        pqtype.NullRawMessage `db:"properties" json:"properties"`
}

// CreateProfile
//
//	INSERT INTO "profile" (id, slug, kind, custom_domain, profile_picture_uri, pronouns, properties)
//	VALUES ($1, $2, $3, $4, $5, $6, $7)
func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) error {
	_, err := q.db.ExecContext(ctx, createProfile,
		arg.ID,
		arg.Slug,
		arg.Kind,
		arg.CustomDomain,
		arg.ProfilePictureURI,
		arg.Pronouns,
		arg.Properties,
	)
	return err
}

const createProfileLink = `-- name: CreateProfileLink :one
INSERT INTO "profile_link" (
  id,
  kind,
  profile_id,
  "order",
  is_managed,
  is_verified,
  is_hidden,
  remote_id,
  public_id,
  uri,
  title,
  auth_provider,
  auth_access_token_scope,
  auth_access_token,
  auth_access_token_expires_at,
  auth_refresh_token,
  auth_refresh_token_expires_at,
  created_at
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9,
  $10,
  $11,
  $12,
  $13,
  $14,
  $15,
  $16,
  $17,
  NOW()
) RETURNING id, profile_id, kind, "order", is_managed, is_verified, is_hidden, remote_id, public_id, uri, title, auth_provider, auth_access_token_scope, auth_access_token, auth_access_token_expires_at, auth_refresh_token, auth_refresh_token_expires_at, properties, created_at, updated_at, deleted_at
`

type CreateProfileLinkParams struct {
	ID                        string         `db:"id" json:"id"`
	Kind                      string         `db:"kind" json:"kind"`
	ProfileID                 string         `db:"profile_id" json:"profile_id"`
	LinkOrder                 int32          `db:"link_order" json:"link_order"`
	IsManaged                 bool           `db:"is_managed" json:"is_managed"`
	IsVerified                bool           `db:"is_verified" json:"is_verified"`
	IsHidden                  bool           `db:"is_hidden" json:"is_hidden"`
	RemoteID                  sql.NullString `db:"remote_id" json:"remote_id"`
	PublicID                  sql.NullString `db:"public_id" json:"public_id"`
	URI                       sql.NullString `db:"uri" json:"uri"`
	Title                     string         `db:"title" json:"title"`
	AuthProvider              sql.NullString `db:"auth_provider" json:"auth_provider"`
	AuthAccessTokenScope      sql.NullString `db:"auth_access_token_scope" json:"auth_access_token_scope"`
	AuthAccessToken           sql.NullString `db:"auth_access_token" json:"auth_access_token"`
	AuthAccessTokenExpiresAt  sql.NullTime   `db:"auth_access_token_expires_at" json:"auth_access_token_expires_at"`
	AuthRefreshToken          sql.NullString `db:"auth_refresh_token" json:"auth_refresh_token"`
	AuthRefreshTokenExpiresAt sql.NullTime   `db:"auth_refresh_token_expires_at" json:"auth_refresh_token_expires_at"`
}

// CreateProfileLink
//
//	INSERT INTO "profile_link" (
//	  id,
//	  kind,
//	  profile_id,
//	  "order",
//	  is_managed,
//	  is_verified,
//	  is_hidden,
//	  remote_id,
//	  public_id,
//	  uri,
//	  title,
//	  auth_provider,
//	  auth_access_token_scope,
//	  auth_access_token,
//	  auth_access_token_expires_at,
//	  auth_refresh_token,
//	  auth_refresh_token_expires_at,
//	  created_at
//	) VALUES (
//	  $1,
//	  $2,
//	  $3,
//	  $4,
//	  $5,
//	  $6,
//	  $7,
//	  $8,
//	  $9,
//	  $10,
//	  $11,
//	  $12,
//	  $13,
//	  $14,
//	  $15,
//	  $16,
//	  $17,
//	  NOW()
//	) RETURNING id, profile_id, kind, "order", is_managed, is_verified, is_hidden, remote_id, public_id, uri, title, auth_provider, auth_access_token_scope, auth_access_token, auth_access_token_expires_at, auth_refresh_token, auth_refresh_token_expires_at, properties, created_at, updated_at, deleted_at
func (q *Queries) CreateProfileLink(ctx context.Context, arg CreateProfileLinkParams) (*ProfileLink, error) {
	row := q.db.QueryRowContext(ctx, createProfileLink,
		arg.ID,
		arg.Kind,
		arg.ProfileID,
		arg.LinkOrder,
		arg.IsManaged,
		arg.IsVerified,
		arg.IsHidden,
		arg.RemoteID,
		arg.PublicID,
		arg.URI,
		arg.Title,
		arg.AuthProvider,
		arg.AuthAccessTokenScope,
		arg.AuthAccessToken,
		arg.AuthAccessTokenExpiresAt,
		arg.AuthRefreshToken,
		arg.AuthRefreshTokenExpiresAt,
	)
	var i ProfileLink
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.Kind,
		&i.Order,
		&i.IsManaged,
		&i.IsVerified,
		&i.IsHidden,
		&i.RemoteID,
		&i.PublicID,
		&i.URI,
		&i.Title,
		&i.AuthProvider,
		&i.AuthAccessTokenScope,
		&i.AuthAccessToken,
		&i.AuthAccessTokenExpiresAt,
		&i.AuthRefreshToken,
		&i.AuthRefreshTokenExpiresAt,
		&i.Properties,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const createProfilePage = `-- name: CreateProfilePage :one
INSERT INTO "profile_page" (
  id,
  slug,
  profile_id,
  "order",
  cover_picture_uri,
  published_at,
  created_at
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  NOW()
) RETURNING id, profile_id, slug, "order", cover_picture_uri, published_at, created_at, updated_at, deleted_at
`

type CreateProfilePageParams struct {
	ID              string         `db:"id" json:"id"`
	Slug            string         `db:"slug" json:"slug"`
	ProfileID       string         `db:"profile_id" json:"profile_id"`
	PageOrder       int32          `db:"page_order" json:"page_order"`
	CoverPictureURI sql.NullString `db:"cover_picture_uri" json:"cover_picture_uri"`
	PublishedAt     sql.NullTime   `db:"published_at" json:"published_at"`
}

// CreateProfilePage
//
//	INSERT INTO "profile_page" (
//	  id,
//	  slug,
//	  profile_id,
//	  "order",
//	  cover_picture_uri,
//	  published_at,
//	  created_at
//	) VALUES (
//	  $1,
//	  $2,
//	  $3,
//	  $4,
//	  $5,
//	  $6,
//	  NOW()
//	) RETURNING id, profile_id, slug, "order", cover_picture_uri, published_at, created_at, updated_at, deleted_at
func (q *Queries) CreateProfilePage(ctx context.Context, arg CreateProfilePageParams) (*ProfilePage, error) {
	row := q.db.QueryRowContext(ctx, createProfilePage,
		arg.ID,
		arg.Slug,
		arg.ProfileID,
		arg.PageOrder,
		arg.CoverPictureURI,
		arg.PublishedAt,
	)
	var i ProfilePage
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.Slug,
		&i.Order,
		&i.CoverPictureURI,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const createProfilePageTx = `-- name: CreateProfilePageTx :exec
INSERT INTO "profile_page_tx" (
  profile_page_id,
  locale_code,
  title,
  summary,
  content
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
)
`

type CreateProfilePageTxParams struct {
	ProfilePageID string `db:"profile_page_id" json:"profile_page_id"`
	LocaleCode    string `db:"locale_code" json:"locale_code"`
	Title         string `db:"title" json:"title"`
	Summary       string `db:"summary" json:"summary"`
	Content       string `db:"content" json:"content"`
}

// CreateProfilePageTx
//
//	INSERT INTO "profile_page_tx" (
//	  profile_page_id,
//	  locale_code,
//	  title,
//	  summary,
//	  content
//	) VALUES (
//	  $1,
//	  $2,
//	  $3,
//	  $4,
//	  $5
//	)
func (q *Queries) CreateProfilePageTx(ctx context.Context, arg CreateProfilePageTxParams) error {
	_, err := q.db.ExecContext(ctx, createProfilePageTx,
		arg.ProfilePageID,
		arg.LocaleCode,
		arg.Title,
		arg.Summary,
		arg.Content,
	)
	return err
}

const createProfileTx = `-- name: CreateProfileTx :exec
INSERT INTO "profile_tx" (profile_id, locale_code, title, description, properties)
VALUES ($1, $2, $3, $4, $5)
`

type CreateProfileTxParams struct {
	ProfileID   string                `db:"profile_id" json:"profile_id"`
	LocaleCode  string                `db:"locale_code" json:"locale_code"`
	Title       string                `db:"title" json:"title"`
	Description string                `db:"description" json:"description"`
	Properties  pqtype.NullRawMessage `db:"properties" json:"properties"`
}

// CreateProfileTx
//
//	INSERT INTO "profile_tx" (profile_id, locale_code, title, description, properties)
//	VALUES ($1, $2, $3, $4, $5)
func (q *Queries) CreateProfileTx(ctx context.Context, arg CreateProfileTxParams) error {
	_, err := q.db.ExecContext(ctx, createProfileTx,
		arg.ProfileID,
		arg.LocaleCode,
		arg.Title,
		arg.Description,
		arg.Properties,
	)
	return err
}

const deleteProfileLink = `-- name: DeleteProfileLink :execrows
UPDATE "profile_link"
SET deleted_at = NOW()
WHERE id = $1
  AND deleted_at IS NULL
`

type DeleteProfileLinkParams struct {
	ID string `db:"id" json:"id"`
}

// DeleteProfileLink
//
//	UPDATE "profile_link"
//	SET deleted_at = NOW()
//	WHERE id = $1
//	  AND deleted_at IS NULL
func (q *Queries) DeleteProfileLink(ctx context.Context, arg DeleteProfileLinkParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteProfileLink, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteProfilePage = `-- name: DeleteProfilePage :execrows
UPDATE "profile_page"
SET deleted_at = NOW()
WHERE id = $1
  AND deleted_at IS NULL
`

type DeleteProfilePageParams struct {
	ID string `db:"id" json:"id"`
}

// DeleteProfilePage
//
//	UPDATE "profile_page"
//	SET deleted_at = NOW()
//	WHERE id = $1
//	  AND deleted_at IS NULL
func (q *Queries) DeleteProfilePage(ctx context.Context, arg DeleteProfilePageParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteProfilePage, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getProfileByID = `-- name: GetProfileByID :one
SELECT p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, p.approved_at, pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
FROM "profile" p
  INNER JOIN "profile_tx" pt ON pt.profile_id = p.id
  AND pt.locale_code = $1
WHERE p.id = $2
  AND p.deleted_at IS NULL
LIMIT 1
`

type GetProfileByIDParams struct {
	LocaleCode string `db:"locale_code" json:"locale_code"`
	ID         string `db:"id" json:"id"`
}

type GetProfileByIDRow struct {
	Profile   Profile   `db:"profile" json:"profile"`
	ProfileTx ProfileTx `db:"profile_tx" json:"profile_tx"`
}

// GetProfileByID
//
//	SELECT p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, p.approved_at, pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
//	FROM "profile" p
//	  INNER JOIN "profile_tx" pt ON pt.profile_id = p.id
//	  AND pt.locale_code = $1
//	WHERE p.id = $2
//	  AND p.deleted_at IS NULL
//	LIMIT 1
func (q *Queries) GetProfileByID(ctx context.Context, arg GetProfileByIDParams) (*GetProfileByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getProfileByID, arg.LocaleCode, arg.ID)
	var i GetProfileByIDRow
	err := row.Scan(
		&i.Profile.ID,
		&i.Profile.Slug,
		&i.Profile.Kind,
		&i.Profile.CustomDomain,
		&i.Profile.ProfilePictureURI,
		&i.Profile.Pronouns,
		&i.Profile.Properties,
		&i.Profile.CreatedAt,
		&i.Profile.UpdatedAt,
		&i.Profile.DeletedAt,
		&i.Profile.ApprovedAt,
		&i.ProfileTx.ProfileID,
		&i.ProfileTx.LocaleCode,
		&i.ProfileTx.Title,
		&i.ProfileTx.Description,
		&i.ProfileTx.Properties,
	)
	return &i, err
}

const getProfileIDByCustomDomain = `-- name: GetProfileIDByCustomDomain :one
SELECT id
FROM "profile"
WHERE custom_domain = $1
  AND deleted_at IS NULL
LIMIT 1
`

type GetProfileIDByCustomDomainParams struct {
	CustomDomain sql.NullString `db:"custom_domain" json:"custom_domain"`
}

// GetProfileIDByCustomDomain
//
//	SELECT id
//	FROM "profile"
//	WHERE custom_domain = $1
//	  AND deleted_at IS NULL
//	LIMIT 1
func (q *Queries) GetProfileIDByCustomDomain(ctx context.Context, arg GetProfileIDByCustomDomainParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getProfileIDByCustomDomain, arg.CustomDomain)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getProfileIDBySlug = `-- name: GetProfileIDBySlug :one
SELECT id
FROM "profile"
WHERE slug = $1
  AND deleted_at IS NULL
LIMIT 1
`

type GetProfileIDBySlugParams struct {
	Slug string `db:"slug" json:"slug"`
}

// GetProfileIDBySlug
//
//	SELECT id
//	FROM "profile"
//	WHERE slug = $1
//	  AND deleted_at IS NULL
//	LIMIT 1
func (q *Queries) GetProfileIDBySlug(ctx context.Context, arg GetProfileIDBySlugParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getProfileIDBySlug, arg.Slug)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getProfileLink = `-- name: GetProfileLink :one
SELECT id, profile_id, kind, "order", is_managed, is_verified, is_hidden, remote_id, public_id, uri, title, auth_provider, auth_access_token_scope, auth_access_token, auth_access_token_expires_at, auth_refresh_token, auth_refresh_token_expires_at, properties, created_at, updated_at, deleted_at
FROM "profile_link"
WHERE id = $1
  AND deleted_at IS NULL
`

type GetProfileLinkParams struct {
	ID string `db:"id" json:"id"`
}

// GetProfileLink
//
//	SELECT id, profile_id, kind, "order", is_managed, is_verified, is_hidden, remote_id, public_id, uri, title, auth_provider, auth_access_token_scope, auth_access_token, auth_access_token_expires_at, auth_refresh_token, auth_refresh_token_expires_at, properties, created_at, updated_at, deleted_at
//	FROM "profile_link"
//	WHERE id = $1
//	  AND deleted_at IS NULL
func (q *Queries) GetProfileLink(ctx context.Context, arg GetProfileLinkParams) (*ProfileLink, error) {
	row := q.db.QueryRowContext(ctx, getProfileLink, arg.ID)
	var i ProfileLink
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.Kind,
		&i.Order,
		&i.IsManaged,
		&i.IsVerified,
		&i.IsHidden,
		&i.RemoteID,
		&i.PublicID,
		&i.URI,
		&i.Title,
		&i.AuthProvider,
		&i.AuthAccessTokenScope,
		&i.AuthAccessToken,
		&i.AuthAccessTokenExpiresAt,
		&i.AuthRefreshToken,
		&i.AuthRefreshTokenExpiresAt,
		&i.Properties,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getProfileMembershipsByMemberProfileID = `-- name: GetProfileMembershipsByMemberProfileID :many
SELECT
  pm.id as membership_id,
  pm.kind as membership_kind,
  pm.started_at,
  pm.finished_at,
  pm.properties as membership_properties,
  pm.created_at as membership_created_at,
  p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, p.approved_at,
  pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
FROM
  "profile_membership" pm
  INNER JOIN "profile" p ON p.id = pm.profile_id
    AND p.approved_at IS NOT NULL
    AND p.deleted_at IS NULL
  INNER JOIN "profile_tx" pt ON pt.profile_id = p.id
    AND pt.locale_code = $1
WHERE
  pm.deleted_at IS NULL
  AND pm.member_profile_id = $2
  AND (pm.finished_at IS NULL OR pm.finished_at > NOW())
ORDER BY pm.created_at DESC
`

type GetProfileMembershipsByMemberProfileIDParams struct {
	LocaleCode      string `db:"locale_code" json:"locale_code"`
	MemberProfileID string `db:"member_profile_id" json:"member_profile_id"`
}

type GetProfileMembershipsByMemberProfileIDRow struct {
	MembershipID         string                `db:"membership_id" json:"membership_id"`
	MembershipKind       string                `db:"membership_kind" json:"membership_kind"`
	StartedAt            sql.NullTime          `db:"started_at" json:"started_at"`
	FinishedAt           sql.NullTime          `db:"finished_at" json:"finished_at"`
	MembershipProperties pqtype.NullRawMessage `db:"membership_properties" json:"membership_properties"`
	MembershipCreatedAt  time.Time             `db:"membership_created_at" json:"membership_created_at"`
	Profile              Profile               `db:"profile" json:"profile"`
	ProfileTx            ProfileTx             `db:"profile_tx" json:"profile_tx"`
}

// GetProfileMembershipsByMemberProfileID
//
//	SELECT
//	  pm.id as membership_id,
//	  pm.kind as membership_kind,
//	  pm.started_at,
//	  pm.finished_at,
//	  pm.properties as membership_properties,
//	  pm.created_at as membership_created_at,
//	  p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, p.approved_at,
//	  pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
//	FROM
//	  "profile_membership" pm
//	  INNER JOIN "profile" p ON p.id = pm.profile_id
//	    AND p.approved_at IS NOT NULL
//	    AND p.deleted_at IS NULL
//	  INNER JOIN "profile_tx" pt ON pt.profile_id = p.id
//	    AND pt.locale_code = $1
//	WHERE
//	  pm.deleted_at IS NULL
//	  AND pm.member_profile_id = $2
//	  AND (pm.finished_at IS NULL OR pm.finished_at > NOW())
//	ORDER BY pm.created_at DESC
func (q *Queries) GetProfileMembershipsByMemberProfileID(ctx context.Context, arg GetProfileMembershipsByMemberProfileIDParams) ([]*GetProfileMembershipsByMemberProfileIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getProfileMembershipsByMemberProfileID, arg.LocaleCode, arg.MemberProfileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetProfileMembershipsByMemberProfileIDRow{}
	for rows.Next() {
		var i GetProfileMembershipsByMemberProfileIDRow
		if err := rows.Scan(
			&i.MembershipID,
			&i.MembershipKind,
			&i.StartedAt,
			&i.FinishedAt,
			&i.MembershipProperties,
			&i.MembershipCreatedAt,
			&i.Profile.ID,
			&i.Profile.Slug,
			&i.Profile.Kind,
			&i.Profile.CustomDomain,
			&i.Profile.ProfilePictureURI,
			&i.Profile.Pronouns,
			&i.Profile.Properties,
			&i.Profile.CreatedAt,
			&i.Profile.UpdatedAt,
			&i.Profile.DeletedAt,
			&i.Profile.ApprovedAt,
			&i.ProfileTx.ProfileID,
			&i.ProfileTx.LocaleCode,
			&i.ProfileTx.Title,
			&i.ProfileTx.Description,
			&i.ProfileTx.Properties,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProfileOwnershipForUser = `-- name: GetProfileOwnershipForUser :one
SELECT
  p.id,
  p.slug,
  p.kind as profile_kind,
  u.kind as user_kind,
  CASE
    WHEN u.kind = 'admin' THEN true
    WHEN p.kind = 'individual' AND u.individual_profile_id = p.id THEN true
    WHEN pm.kind IN ('owner', 'lead') THEN true
    ELSE false
  END as can_edit
FROM "profile" p
LEFT JOIN "profile_membership" pm ON p.id = pm.profile_id
  AND pm.deleted_at IS NULL
  AND (pm.finished_at IS NULL OR pm.finished_at > NOW())
LEFT JOIN "profile" up ON pm.member_profile_id = up.id AND up.deleted_at IS NULL
LEFT JOIN "user" u ON up.id = u.individual_profile_id
WHERE u.id = $1
  AND p.slug = $2
  AND p.deleted_at IS NULL
LIMIT 1
`

type GetProfileOwnershipForUserParams struct {
	UserID      string `db:"user_id" json:"user_id"`
	ProfileSlug string `db:"profile_slug" json:"profile_slug"`
}

type GetProfileOwnershipForUserRow struct {
	ID          string         `db:"id" json:"id"`
	Slug        string         `db:"slug" json:"slug"`
	ProfileKind string         `db:"profile_kind" json:"profile_kind"`
	UserKind    sql.NullString `db:"user_kind" json:"user_kind"`
	CanEdit     bool           `db:"can_edit" json:"can_edit"`
}

// GetProfileOwnershipForUser
//
//	SELECT
//	  p.id,
//	  p.slug,
//	  p.kind as profile_kind,
//	  u.kind as user_kind,
//	  CASE
//	    WHEN u.kind = 'admin' THEN true
//	    WHEN p.kind = 'individual' AND u.individual_profile_id = p.id THEN true
//	    WHEN pm.kind IN ('owner', 'lead') THEN true
//	    ELSE false
//	  END as can_edit
//	FROM "profile" p
//	LEFT JOIN "profile_membership" pm ON p.id = pm.profile_id
//	  AND pm.deleted_at IS NULL
//	  AND (pm.finished_at IS NULL OR pm.finished_at > NOW())
//	LEFT JOIN "profile" up ON pm.member_profile_id = up.id AND up.deleted_at IS NULL
//	LEFT JOIN "user" u ON up.id = u.individual_profile_id
//	WHERE u.id = $1
//	  AND p.slug = $2
//	  AND p.deleted_at IS NULL
//	LIMIT 1
func (q *Queries) GetProfileOwnershipForUser(ctx context.Context, arg GetProfileOwnershipForUserParams) (*GetProfileOwnershipForUserRow, error) {
	row := q.db.QueryRowContext(ctx, getProfileOwnershipForUser, arg.UserID, arg.ProfileSlug)
	var i GetProfileOwnershipForUserRow
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.ProfileKind,
		&i.UserKind,
		&i.CanEdit,
	)
	return &i, err
}

const getProfilePage = `-- name: GetProfilePage :one
SELECT id, profile_id, slug, "order", cover_picture_uri, published_at, created_at, updated_at, deleted_at
FROM "profile_page"
WHERE id = $1
  AND deleted_at IS NULL
`

type GetProfilePageParams struct {
	ID string `db:"id" json:"id"`
}

// GetProfilePage
//
//	SELECT id, profile_id, slug, "order", cover_picture_uri, published_at, created_at, updated_at, deleted_at
//	FROM "profile_page"
//	WHERE id = $1
//	  AND deleted_at IS NULL
func (q *Queries) GetProfilePage(ctx context.Context, arg GetProfilePageParams) (*ProfilePage, error) {
	row := q.db.QueryRowContext(ctx, getProfilePage, arg.ID)
	var i ProfilePage
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.Slug,
		&i.Order,
		&i.CoverPictureURI,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getProfilePageByProfileIDAndSlug = `-- name: GetProfilePageByProfileIDAndSlug :one
SELECT pp.id, pp.profile_id, pp.slug, pp."order", pp.cover_picture_uri, pp.published_at, pp.created_at, pp.updated_at, pp.deleted_at, ppt.profile_page_id, ppt.locale_code, ppt.title, ppt.summary, ppt.content
FROM "profile_page" pp
  INNER JOIN "profile_page_tx" ppt ON ppt.profile_page_id = pp.id
  AND ppt.locale_code = $1
WHERE pp.profile_id = $2 AND pp.slug = $3 AND pp.deleted_at IS NULL
ORDER BY pp."order"
`

type GetProfilePageByProfileIDAndSlugParams struct {
	LocaleCode string `db:"locale_code" json:"locale_code"`
	ProfileID  string `db:"profile_id" json:"profile_id"`
	PageSlug   string `db:"page_slug" json:"page_slug"`
}

type GetProfilePageByProfileIDAndSlugRow struct {
	ID              string         `db:"id" json:"id"`
	ProfileID       string         `db:"profile_id" json:"profile_id"`
	Slug            string         `db:"slug" json:"slug"`
	Order           int32          `db:"order" json:"order"`
	CoverPictureURI sql.NullString `db:"cover_picture_uri" json:"cover_picture_uri"`
	PublishedAt     sql.NullTime   `db:"published_at" json:"published_at"`
	CreatedAt       time.Time      `db:"created_at" json:"created_at"`
	UpdatedAt       sql.NullTime   `db:"updated_at" json:"updated_at"`
	DeletedAt       sql.NullTime   `db:"deleted_at" json:"deleted_at"`
	ProfilePageID   string         `db:"profile_page_id" json:"profile_page_id"`
	LocaleCode      string         `db:"locale_code" json:"locale_code"`
	Title           string         `db:"title" json:"title"`
	Summary         string         `db:"summary" json:"summary"`
	Content         string         `db:"content" json:"content"`
}

// GetProfilePageByProfileIDAndSlug
//
//	SELECT pp.id, pp.profile_id, pp.slug, pp."order", pp.cover_picture_uri, pp.published_at, pp.created_at, pp.updated_at, pp.deleted_at, ppt.profile_page_id, ppt.locale_code, ppt.title, ppt.summary, ppt.content
//	FROM "profile_page" pp
//	  INNER JOIN "profile_page_tx" ppt ON ppt.profile_page_id = pp.id
//	  AND ppt.locale_code = $1
//	WHERE pp.profile_id = $2 AND pp.slug = $3 AND pp.deleted_at IS NULL
//	ORDER BY pp."order"
func (q *Queries) GetProfilePageByProfileIDAndSlug(ctx context.Context, arg GetProfilePageByProfileIDAndSlugParams) (*GetProfilePageByProfileIDAndSlugRow, error) {
	row := q.db.QueryRowContext(ctx, getProfilePageByProfileIDAndSlug, arg.LocaleCode, arg.ProfileID, arg.PageSlug)
	var i GetProfilePageByProfileIDAndSlugRow
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.Slug,
		&i.Order,
		&i.CoverPictureURI,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ProfilePageID,
		&i.LocaleCode,
		&i.Title,
		&i.Summary,
		&i.Content,
	)
	return &i, err
}

const getProfileTxByID = `-- name: GetProfileTxByID :many
SELECT pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
FROM "profile_tx" pt
WHERE pt.profile_id = $1
`

type GetProfileTxByIDParams struct {
	ID string `db:"id" json:"id"`
}

type GetProfileTxByIDRow struct {
	ProfileTx ProfileTx `db:"profile_tx" json:"profile_tx"`
}

// GetProfileTxByID
//
//	SELECT pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
//	FROM "profile_tx" pt
//	WHERE pt.profile_id = $1
func (q *Queries) GetProfileTxByID(ctx context.Context, arg GetProfileTxByIDParams) ([]*GetProfileTxByIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getProfileTxByID, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetProfileTxByIDRow{}
	for rows.Next() {
		var i GetProfileTxByIDRow
		if err := rows.Scan(
			&i.ProfileTx.ProfileID,
			&i.ProfileTx.LocaleCode,
			&i.ProfileTx.Title,
			&i.ProfileTx.Description,
			&i.ProfileTx.Properties,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserProfilePermissions = `-- name: GetUserProfilePermissions :many
SELECT
  p.id,
  p.slug,
  p.kind as profile_kind,
  COALESCE(pm.kind, '') as membership_kind,
  u.kind as user_kind
FROM "profile" p
LEFT JOIN "profile_membership" pm ON p.id = pm.profile_id AND pm.deleted_at IS NULL
LEFT JOIN "profile" up ON pm.member_profile_id = up.id AND up.deleted_at IS NULL
LEFT JOIN "user" u ON up.id = u.individual_profile_id
WHERE u.id = $1
  AND p.deleted_at IS NULL
  AND (pm.finished_at IS NULL OR pm.finished_at > NOW())
`

type GetUserProfilePermissionsParams struct {
	UserID string `db:"user_id" json:"user_id"`
}

type GetUserProfilePermissionsRow struct {
	ID             string         `db:"id" json:"id"`
	Slug           string         `db:"slug" json:"slug"`
	ProfileKind    string         `db:"profile_kind" json:"profile_kind"`
	MembershipKind string         `db:"membership_kind" json:"membership_kind"`
	UserKind       sql.NullString `db:"user_kind" json:"user_kind"`
}

// GetUserProfilePermissions
//
//	SELECT
//	  p.id,
//	  p.slug,
//	  p.kind as profile_kind,
//	  COALESCE(pm.kind, '') as membership_kind,
//	  u.kind as user_kind
//	FROM "profile" p
//	LEFT JOIN "profile_membership" pm ON p.id = pm.profile_id AND pm.deleted_at IS NULL
//	LEFT JOIN "profile" up ON pm.member_profile_id = up.id AND up.deleted_at IS NULL
//	LEFT JOIN "user" u ON up.id = u.individual_profile_id
//	WHERE u.id = $1
//	  AND p.deleted_at IS NULL
//	  AND (pm.finished_at IS NULL OR pm.finished_at > NOW())
func (q *Queries) GetUserProfilePermissions(ctx context.Context, arg GetUserProfilePermissionsParams) ([]*GetUserProfilePermissionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserProfilePermissions, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetUserProfilePermissionsRow{}
	for rows.Next() {
		var i GetUserProfilePermissionsRow
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.ProfileKind,
			&i.MembershipKind,
			&i.UserKind,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProfileLinksByProfileID = `-- name: ListProfileLinksByProfileID :many
SELECT id, profile_id, kind, "order", is_managed, is_verified, is_hidden, remote_id, public_id, uri, title, auth_provider, auth_access_token_scope, auth_access_token, auth_access_token_expires_at, auth_refresh_token, auth_refresh_token_expires_at, properties, created_at, updated_at, deleted_at
FROM "profile_link"
WHERE profile_id = $1
  AND is_hidden = FALSE
  AND deleted_at IS NULL
ORDER BY "order"
`

type ListProfileLinksByProfileIDParams struct {
	ProfileID string `db:"profile_id" json:"profile_id"`
}

// ListProfileLinksByProfileID
//
//	SELECT id, profile_id, kind, "order", is_managed, is_verified, is_hidden, remote_id, public_id, uri, title, auth_provider, auth_access_token_scope, auth_access_token, auth_access_token_expires_at, auth_refresh_token, auth_refresh_token_expires_at, properties, created_at, updated_at, deleted_at
//	FROM "profile_link"
//	WHERE profile_id = $1
//	  AND is_hidden = FALSE
//	  AND deleted_at IS NULL
//	ORDER BY "order"
func (q *Queries) ListProfileLinksByProfileID(ctx context.Context, arg ListProfileLinksByProfileIDParams) ([]*ProfileLink, error) {
	rows, err := q.db.QueryContext(ctx, listProfileLinksByProfileID, arg.ProfileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ProfileLink{}
	for rows.Next() {
		var i ProfileLink
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.Kind,
			&i.Order,
			&i.IsManaged,
			&i.IsVerified,
			&i.IsHidden,
			&i.RemoteID,
			&i.PublicID,
			&i.URI,
			&i.Title,
			&i.AuthProvider,
			&i.AuthAccessTokenScope,
			&i.AuthAccessToken,
			&i.AuthAccessTokenExpiresAt,
			&i.AuthRefreshToken,
			&i.AuthRefreshTokenExpiresAt,
			&i.Properties,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProfileLinksForKind = `-- name: ListProfileLinksForKind :many
SELECT pl.id, pl.profile_id, pl.kind, pl."order", pl.is_managed, pl.is_verified, pl.is_hidden, pl.remote_id, pl.public_id, pl.uri, pl.title, pl.auth_provider, pl.auth_access_token_scope, pl.auth_access_token, pl.auth_access_token_expires_at, pl.auth_refresh_token, pl.auth_refresh_token_expires_at, pl.properties, pl.created_at, pl.updated_at, pl.deleted_at
FROM "profile_link" pl
  INNER JOIN "profile" p ON p.id = pl.profile_id
  AND p.deleted_at IS NULL
WHERE pl.kind = $1
  AND pl.deleted_at IS NULL
ORDER BY pl."order"
`

type ListProfileLinksForKindParams struct {
	Kind string `db:"kind" json:"kind"`
}

// ListProfileLinksForKind
//
//	SELECT pl.id, pl.profile_id, pl.kind, pl."order", pl.is_managed, pl.is_verified, pl.is_hidden, pl.remote_id, pl.public_id, pl.uri, pl.title, pl.auth_provider, pl.auth_access_token_scope, pl.auth_access_token, pl.auth_access_token_expires_at, pl.auth_refresh_token, pl.auth_refresh_token_expires_at, pl.properties, pl.created_at, pl.updated_at, pl.deleted_at
//	FROM "profile_link" pl
//	  INNER JOIN "profile" p ON p.id = pl.profile_id
//	  AND p.deleted_at IS NULL
//	WHERE pl.kind = $1
//	  AND pl.deleted_at IS NULL
//	ORDER BY pl."order"
func (q *Queries) ListProfileLinksForKind(ctx context.Context, arg ListProfileLinksForKindParams) ([]*ProfileLink, error) {
	rows, err := q.db.QueryContext(ctx, listProfileLinksForKind, arg.Kind)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ProfileLink{}
	for rows.Next() {
		var i ProfileLink
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.Kind,
			&i.Order,
			&i.IsManaged,
			&i.IsVerified,
			&i.IsHidden,
			&i.RemoteID,
			&i.PublicID,
			&i.URI,
			&i.Title,
			&i.AuthProvider,
			&i.AuthAccessTokenScope,
			&i.AuthAccessToken,
			&i.AuthAccessTokenExpiresAt,
			&i.AuthRefreshToken,
			&i.AuthRefreshTokenExpiresAt,
			&i.Properties,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProfileMemberships = `-- name: ListProfileMemberships :many
SELECT
  pm.id, pm.profile_id, pm.member_profile_id, pm.kind, pm.properties, pm.started_at, pm.finished_at, pm.created_at, pm.updated_at, pm.deleted_at,
  p1.id, p1.slug, p1.kind, p1.custom_domain, p1.profile_picture_uri, p1.pronouns, p1.properties, p1.created_at, p1.updated_at, p1.deleted_at, p1.approved_at,
  p1t.profile_id, p1t.locale_code, p1t.title, p1t.description, p1t.properties,
  p2.id, p2.slug, p2.kind, p2.custom_domain, p2.profile_picture_uri, p2.pronouns, p2.properties, p2.created_at, p2.updated_at, p2.deleted_at, p2.approved_at,
  p2t.profile_id, p2t.locale_code, p2t.title, p2t.description, p2t.properties
FROM
	"profile_membership" pm
  INNER JOIN "profile" p1 ON p1.id = pm.profile_id
    AND ($1::TEXT IS NULL OR p1.kind = ANY(string_to_array($1::TEXT, ',')))
    AND p1.approved_at IS NOT NULL
    AND p1.deleted_at IS NULL
  INNER JOIN "profile_tx" p1t ON p1t.profile_id = p1.id
	  AND p1t.locale_code = $2
  INNER JOIN "profile" p2 ON p2.id = pm.member_profile_id
    AND ($3::TEXT IS NULL OR p2.kind = ANY(string_to_array($3::TEXT, ',')))
    AND p2.approved_at IS NOT NULL
    AND p2.deleted_at IS NULL
  INNER JOIN "profile_tx" p2t ON p2t.profile_id = p2.id
	  AND p2t.locale_code = $2
WHERE pm.deleted_at IS NULL
    AND ($4::TEXT IS NULL OR pm.profile_id = $4::TEXT)
    AND ($5::TEXT IS NULL OR pm.member_profile_id = $5::TEXT)
`

type ListProfileMembershipsParams struct {
	FilterProfileKind       sql.NullString `db:"filter_profile_kind" json:"filter_profile_kind"`
	LocaleCode              string         `db:"locale_code" json:"locale_code"`
	FilterMemberProfileKind sql.NullString `db:"filter_member_profile_kind" json:"filter_member_profile_kind"`
	FilterProfileID         sql.NullString `db:"filter_profile_id" json:"filter_profile_id"`
	FilterMemberProfileID   sql.NullString `db:"filter_member_profile_id" json:"filter_member_profile_id"`
}

type ListProfileMembershipsRow struct {
	ProfileMembership ProfileMembership `db:"profile_membership" json:"profile_membership"`
	Profile           Profile           `db:"profile" json:"profile"`
	ProfileTx         ProfileTx         `db:"profile_tx" json:"profile_tx"`
	Profile_2         Profile           `db:"profile_2" json:"profile_2"`
	ProfileTx_2       ProfileTx         `db:"profile_tx_2" json:"profile_tx_2"`
}

// ListProfileMemberships
//
//	SELECT
//	  pm.id, pm.profile_id, pm.member_profile_id, pm.kind, pm.properties, pm.started_at, pm.finished_at, pm.created_at, pm.updated_at, pm.deleted_at,
//	  p1.id, p1.slug, p1.kind, p1.custom_domain, p1.profile_picture_uri, p1.pronouns, p1.properties, p1.created_at, p1.updated_at, p1.deleted_at, p1.approved_at,
//	  p1t.profile_id, p1t.locale_code, p1t.title, p1t.description, p1t.properties,
//	  p2.id, p2.slug, p2.kind, p2.custom_domain, p2.profile_picture_uri, p2.pronouns, p2.properties, p2.created_at, p2.updated_at, p2.deleted_at, p2.approved_at,
//	  p2t.profile_id, p2t.locale_code, p2t.title, p2t.description, p2t.properties
//	FROM
//		"profile_membership" pm
//	  INNER JOIN "profile" p1 ON p1.id = pm.profile_id
//	    AND ($1::TEXT IS NULL OR p1.kind = ANY(string_to_array($1::TEXT, ',')))
//	    AND p1.approved_at IS NOT NULL
//	    AND p1.deleted_at IS NULL
//	  INNER JOIN "profile_tx" p1t ON p1t.profile_id = p1.id
//		  AND p1t.locale_code = $2
//	  INNER JOIN "profile" p2 ON p2.id = pm.member_profile_id
//	    AND ($3::TEXT IS NULL OR p2.kind = ANY(string_to_array($3::TEXT, ',')))
//	    AND p2.approved_at IS NOT NULL
//	    AND p2.deleted_at IS NULL
//	  INNER JOIN "profile_tx" p2t ON p2t.profile_id = p2.id
//		  AND p2t.locale_code = $2
//	WHERE pm.deleted_at IS NULL
//	    AND ($4::TEXT IS NULL OR pm.profile_id = $4::TEXT)
//	    AND ($5::TEXT IS NULL OR pm.member_profile_id = $5::TEXT)
func (q *Queries) ListProfileMemberships(ctx context.Context, arg ListProfileMembershipsParams) ([]*ListProfileMembershipsRow, error) {
	rows, err := q.db.QueryContext(ctx, listProfileMemberships,
		arg.FilterProfileKind,
		arg.LocaleCode,
		arg.FilterMemberProfileKind,
		arg.FilterProfileID,
		arg.FilterMemberProfileID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListProfileMembershipsRow{}
	for rows.Next() {
		var i ListProfileMembershipsRow
		if err := rows.Scan(
			&i.ProfileMembership.ID,
			&i.ProfileMembership.ProfileID,
			&i.ProfileMembership.MemberProfileID,
			&i.ProfileMembership.Kind,
			&i.ProfileMembership.Properties,
			&i.ProfileMembership.StartedAt,
			&i.ProfileMembership.FinishedAt,
			&i.ProfileMembership.CreatedAt,
			&i.ProfileMembership.UpdatedAt,
			&i.ProfileMembership.DeletedAt,
			&i.Profile.ID,
			&i.Profile.Slug,
			&i.Profile.Kind,
			&i.Profile.CustomDomain,
			&i.Profile.ProfilePictureURI,
			&i.Profile.Pronouns,
			&i.Profile.Properties,
			&i.Profile.CreatedAt,
			&i.Profile.UpdatedAt,
			&i.Profile.DeletedAt,
			&i.Profile.ApprovedAt,
			&i.ProfileTx.ProfileID,
			&i.ProfileTx.LocaleCode,
			&i.ProfileTx.Title,
			&i.ProfileTx.Description,
			&i.ProfileTx.Properties,
			&i.Profile_2.ID,
			&i.Profile_2.Slug,
			&i.Profile_2.Kind,
			&i.Profile_2.CustomDomain,
			&i.Profile_2.ProfilePictureURI,
			&i.Profile_2.Pronouns,
			&i.Profile_2.Properties,
			&i.Profile_2.CreatedAt,
			&i.Profile_2.UpdatedAt,
			&i.Profile_2.DeletedAt,
			&i.Profile_2.ApprovedAt,
			&i.ProfileTx_2.ProfileID,
			&i.ProfileTx_2.LocaleCode,
			&i.ProfileTx_2.Title,
			&i.ProfileTx_2.Description,
			&i.ProfileTx_2.Properties,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProfilePagesByProfileID = `-- name: ListProfilePagesByProfileID :many
SELECT pp.id, pp.profile_id, pp.slug, pp."order", pp.cover_picture_uri, pp.published_at, pp.created_at, pp.updated_at, pp.deleted_at, ppt.profile_page_id, ppt.locale_code, ppt.title, ppt.summary, ppt.content
FROM "profile_page" pp
  INNER JOIN "profile_page_tx" ppt ON ppt.profile_page_id = pp.id
  AND ppt.locale_code = $1
WHERE pp.profile_id = $2
  AND pp.deleted_at IS NULL
ORDER BY pp."order"
`

type ListProfilePagesByProfileIDParams struct {
	LocaleCode string `db:"locale_code" json:"locale_code"`
	ProfileID  string `db:"profile_id" json:"profile_id"`
}

type ListProfilePagesByProfileIDRow struct {
	ID              string         `db:"id" json:"id"`
	ProfileID       string         `db:"profile_id" json:"profile_id"`
	Slug            string         `db:"slug" json:"slug"`
	Order           int32          `db:"order" json:"order"`
	CoverPictureURI sql.NullString `db:"cover_picture_uri" json:"cover_picture_uri"`
	PublishedAt     sql.NullTime   `db:"published_at" json:"published_at"`
	CreatedAt       time.Time      `db:"created_at" json:"created_at"`
	UpdatedAt       sql.NullTime   `db:"updated_at" json:"updated_at"`
	DeletedAt       sql.NullTime   `db:"deleted_at" json:"deleted_at"`
	ProfilePageID   string         `db:"profile_page_id" json:"profile_page_id"`
	LocaleCode      string         `db:"locale_code" json:"locale_code"`
	Title           string         `db:"title" json:"title"`
	Summary         string         `db:"summary" json:"summary"`
	Content         string         `db:"content" json:"content"`
}

// ListProfilePagesByProfileID
//
//	SELECT pp.id, pp.profile_id, pp.slug, pp."order", pp.cover_picture_uri, pp.published_at, pp.created_at, pp.updated_at, pp.deleted_at, ppt.profile_page_id, ppt.locale_code, ppt.title, ppt.summary, ppt.content
//	FROM "profile_page" pp
//	  INNER JOIN "profile_page_tx" ppt ON ppt.profile_page_id = pp.id
//	  AND ppt.locale_code = $1
//	WHERE pp.profile_id = $2
//	  AND pp.deleted_at IS NULL
//	ORDER BY pp."order"
func (q *Queries) ListProfilePagesByProfileID(ctx context.Context, arg ListProfilePagesByProfileIDParams) ([]*ListProfilePagesByProfileIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listProfilePagesByProfileID, arg.LocaleCode, arg.ProfileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListProfilePagesByProfileIDRow{}
	for rows.Next() {
		var i ListProfilePagesByProfileIDRow
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.Slug,
			&i.Order,
			&i.CoverPictureURI,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.ProfilePageID,
			&i.LocaleCode,
			&i.Title,
			&i.Summary,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProfiles = `-- name: ListProfiles :many
SELECT p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, p.approved_at, pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
FROM "profile" p
  INNER JOIN "profile_tx" pt ON pt.profile_id = p.id
  AND pt.locale_code = $1
WHERE ($2::TEXT IS NULL OR p.kind = ANY(string_to_array($2::TEXT, ',')))
  AND p.approved_at IS NOT NULL
  AND p.deleted_at IS NULL
`

type ListProfilesParams struct {
	LocaleCode string         `db:"locale_code" json:"locale_code"`
	FilterKind sql.NullString `db:"filter_kind" json:"filter_kind"`
}

type ListProfilesRow struct {
	Profile   Profile   `db:"profile" json:"profile"`
	ProfileTx ProfileTx `db:"profile_tx" json:"profile_tx"`
}

// ListProfiles
//
//	SELECT p.id, p.slug, p.kind, p.custom_domain, p.profile_picture_uri, p.pronouns, p.properties, p.created_at, p.updated_at, p.deleted_at, p.approved_at, pt.profile_id, pt.locale_code, pt.title, pt.description, pt.properties
//	FROM "profile" p
//	  INNER JOIN "profile_tx" pt ON pt.profile_id = p.id
//	  AND pt.locale_code = $1
//	WHERE ($2::TEXT IS NULL OR p.kind = ANY(string_to_array($2::TEXT, ',')))
//	  AND p.approved_at IS NOT NULL
//	  AND p.deleted_at IS NULL
func (q *Queries) ListProfiles(ctx context.Context, arg ListProfilesParams) ([]*ListProfilesRow, error) {
	rows, err := q.db.QueryContext(ctx, listProfiles, arg.LocaleCode, arg.FilterKind)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListProfilesRow{}
	for rows.Next() {
		var i ListProfilesRow
		if err := rows.Scan(
			&i.Profile.ID,
			&i.Profile.Slug,
			&i.Profile.Kind,
			&i.Profile.CustomDomain,
			&i.Profile.ProfilePictureURI,
			&i.Profile.Pronouns,
			&i.Profile.Properties,
			&i.Profile.CreatedAt,
			&i.Profile.UpdatedAt,
			&i.Profile.DeletedAt,
			&i.Profile.ApprovedAt,
			&i.ProfileTx.ProfileID,
			&i.ProfileTx.LocaleCode,
			&i.ProfileTx.Title,
			&i.ProfileTx.Description,
			&i.ProfileTx.Properties,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeProfile = `-- name: RemoveProfile :execrows
UPDATE "profile"
SET deleted_at = NOW()
WHERE id = $1
  AND deleted_at IS NULL
`

type RemoveProfileParams struct {
	ID string `db:"id" json:"id"`
}

// RemoveProfile
//
//	UPDATE "profile"
//	SET deleted_at = NOW()
//	WHERE id = $1
//	  AND deleted_at IS NULL
func (q *Queries) RemoveProfile(ctx context.Context, arg RemoveProfileParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, removeProfile, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateProfile = `-- name: UpdateProfile :execrows
UPDATE "profile"
SET
  profile_picture_uri = $1,
  pronouns = $2,
  properties = $3,
  updated_at = NOW()
WHERE id = $4
  AND deleted_at IS NULL
`

type UpdateProfileParams struct {
	ProfilePictureURI sql.NullString        `db:"profile_picture_uri" json:"profile_picture_uri"`
	Pronouns          sql.NullString        `db:"pronouns" json:"pronouns"`
	Properties        pqtype.NullRawMessage `db:"properties" json:"properties"`
	ID                string                `db:"id" json:"id"`
}

// UpdateProfile
//
//	UPDATE "profile"
//	SET
//	  profile_picture_uri = $1,
//	  pronouns = $2,
//	  properties = $3,
//	  updated_at = NOW()
//	WHERE id = $4
//	  AND deleted_at IS NULL
func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateProfile,
		arg.ProfilePictureURI,
		arg.Pronouns,
		arg.Properties,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateProfileLink = `-- name: UpdateProfileLink :execrows
UPDATE "profile_link"
SET
  kind = $1,
  "order" = $2,
  uri = $3,
  title = $4,
  is_hidden = $5,
  updated_at = NOW()
WHERE id = $6
  AND deleted_at IS NULL
`

type UpdateProfileLinkParams struct {
	Kind      string         `db:"kind" json:"kind"`
	LinkOrder int32          `db:"link_order" json:"link_order"`
	URI       sql.NullString `db:"uri" json:"uri"`
	Title     string         `db:"title" json:"title"`
	IsHidden  bool           `db:"is_hidden" json:"is_hidden"`
	ID        string         `db:"id" json:"id"`
}

// UpdateProfileLink
//
//	UPDATE "profile_link"
//	SET
//	  kind = $1,
//	  "order" = $2,
//	  uri = $3,
//	  title = $4,
//	  is_hidden = $5,
//	  updated_at = NOW()
//	WHERE id = $6
//	  AND deleted_at IS NULL
func (q *Queries) UpdateProfileLink(ctx context.Context, arg UpdateProfileLinkParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateProfileLink,
		arg.Kind,
		arg.LinkOrder,
		arg.URI,
		arg.Title,
		arg.IsHidden,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateProfilePage = `-- name: UpdateProfilePage :execrows
UPDATE "profile_page"
SET
  slug = $1,
  "order" = $2,
  cover_picture_uri = $3,
  published_at = $4,
  updated_at = NOW()
WHERE id = $5
  AND deleted_at IS NULL
`

type UpdateProfilePageParams struct {
	Slug            string         `db:"slug" json:"slug"`
	PageOrder       int32          `db:"page_order" json:"page_order"`
	CoverPictureURI sql.NullString `db:"cover_picture_uri" json:"cover_picture_uri"`
	PublishedAt     sql.NullTime   `db:"published_at" json:"published_at"`
	ID              string         `db:"id" json:"id"`
}

// UpdateProfilePage
//
//	UPDATE "profile_page"
//	SET
//	  slug = $1,
//	  "order" = $2,
//	  cover_picture_uri = $3,
//	  published_at = $4,
//	  updated_at = NOW()
//	WHERE id = $5
//	  AND deleted_at IS NULL
func (q *Queries) UpdateProfilePage(ctx context.Context, arg UpdateProfilePageParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateProfilePage,
		arg.Slug,
		arg.PageOrder,
		arg.CoverPictureURI,
		arg.PublishedAt,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateProfilePageTx = `-- name: UpdateProfilePageTx :execrows
UPDATE "profile_page_tx"
SET
  title = $1,
  summary = $2,
  content = $3
WHERE profile_page_id = $4
  AND locale_code = $5
`

type UpdateProfilePageTxParams struct {
	Title         string `db:"title" json:"title"`
	Summary       string `db:"summary" json:"summary"`
	Content       string `db:"content" json:"content"`
	ProfilePageID string `db:"profile_page_id" json:"profile_page_id"`
	LocaleCode    string `db:"locale_code" json:"locale_code"`
}

// UpdateProfilePageTx
//
//	UPDATE "profile_page_tx"
//	SET
//	  title = $1,
//	  summary = $2,
//	  content = $3
//	WHERE profile_page_id = $4
//	  AND locale_code = $5
func (q *Queries) UpdateProfilePageTx(ctx context.Context, arg UpdateProfilePageTxParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateProfilePageTx,
		arg.Title,
		arg.Summary,
		arg.Content,
		arg.ProfilePageID,
		arg.LocaleCode,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateProfileTx = `-- name: UpdateProfileTx :execrows
UPDATE "profile_tx"
SET
  title = $1,
  description = $2,
  properties = $3
WHERE profile_id = $4
  AND locale_code = $5
`

type UpdateProfileTxParams struct {
	Title       string                `db:"title" json:"title"`
	Description string                `db:"description" json:"description"`
	Properties  pqtype.NullRawMessage `db:"properties" json:"properties"`
	ProfileID   string                `db:"profile_id" json:"profile_id"`
	LocaleCode  string                `db:"locale_code" json:"locale_code"`
}

// UpdateProfileTx
//
//	UPDATE "profile_tx"
//	SET
//	  title = $1,
//	  description = $2,
//	  properties = $3
//	WHERE profile_id = $4
//	  AND locale_code = $5
func (q *Queries) UpdateProfileTx(ctx context.Context, arg UpdateProfileTxParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateProfileTx,
		arg.Title,
		arg.Description,
		arg.Properties,
		arg.ProfileID,
		arg.LocaleCode,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const upsertProfilePageTx = `-- name: UpsertProfilePageTx :exec
INSERT INTO "profile_page_tx" (
  profile_page_id,
  locale_code,
  title,
  summary,
  content
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
) ON CONFLICT (profile_page_id, locale_code) DO UPDATE SET
  title = EXCLUDED.title,
  summary = EXCLUDED.summary,
  content = EXCLUDED.content
`

type UpsertProfilePageTxParams struct {
	ProfilePageID string `db:"profile_page_id" json:"profile_page_id"`
	LocaleCode    string `db:"locale_code" json:"locale_code"`
	Title         string `db:"title" json:"title"`
	Summary       string `db:"summary" json:"summary"`
	Content       string `db:"content" json:"content"`
}

// UpsertProfilePageTx
//
//	INSERT INTO "profile_page_tx" (
//	  profile_page_id,
//	  locale_code,
//	  title,
//	  summary,
//	  content
//	) VALUES (
//	  $1,
//	  $2,
//	  $3,
//	  $4,
//	  $5
//	) ON CONFLICT (profile_page_id, locale_code) DO UPDATE SET
//	  title = EXCLUDED.title,
//	  summary = EXCLUDED.summary,
//	  content = EXCLUDED.content
func (q *Queries) UpsertProfilePageTx(ctx context.Context, arg UpsertProfilePageTxParams) error {
	_, err := q.db.ExecContext(ctx, upsertProfilePageTx,
		arg.ProfilePageID,
		arg.LocaleCode,
		arg.Title,
		arg.Summary,
		arg.Content,
	)
	return err
}

const upsertProfileTx = `-- name: UpsertProfileTx :exec
INSERT INTO "profile_tx" (profile_id, locale_code, title, description, properties)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (profile_id, locale_code)
DO UPDATE SET
  title = EXCLUDED.title,
  description = EXCLUDED.description,
  properties = EXCLUDED.properties
`

type UpsertProfileTxParams struct {
	ProfileID   string                `db:"profile_id" json:"profile_id"`
	LocaleCode  string                `db:"locale_code" json:"locale_code"`
	Title       string                `db:"title" json:"title"`
	Description string                `db:"description" json:"description"`
	Properties  pqtype.NullRawMessage `db:"properties" json:"properties"`
}

// UpsertProfileTx
//
//	INSERT INTO "profile_tx" (profile_id, locale_code, title, description, properties)
//	VALUES ($1, $2, $3, $4, $5)
//	ON CONFLICT (profile_id, locale_code)
//	DO UPDATE SET
//	  title = EXCLUDED.title,
//	  description = EXCLUDED.description,
//	  properties = EXCLUDED.properties
func (q *Queries) UpsertProfileTx(ctx context.Context, arg UpsertProfileTxParams) error {
	_, err := q.db.ExecContext(ctx, upsertProfileTx,
		arg.ProfileID,
		arg.LocaleCode,
		arg.Title,
		arg.Description,
		arg.Properties,
	)
	return err
}
